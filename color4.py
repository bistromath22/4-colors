#!/usr/bin/env python
# -*- coding: UTF8 -*-

# Author: Guillaume Bouvier -- guillaume.bouvier@pasteur.fr
# https://research.pasteur.fr/en/member/guillaume-bouvier/
# 2020-05-26 16:56:48 (UTC+0200)

import numpy
import scipy.spatial
import scipy.ndimage
import matplotlib.pyplot as plt


def generate_input(shape=(100, 100), ncenters=100):
    """
    Voronoi tesselation on a 2D array
    """
    x = numpy.random.uniform(0, shape[0], size=ncenters)
    y = numpy.random.uniform(0, shape[1], size=ncenters)
    centers = numpy.c_[x, y]
    kdtree = scipy.spatial.KDTree(centers)
    data = [numpy.unravel_index(i, shape) for i in range(shape[0] * shape[1])]
    _, label = kdtree.query(data)
    return label.reshape(shape)


def get_neighbor_regions(labels, label):
    """
    labels: 2D array of labels as generated by generate_input
    label: Region to compute the neighbors of
    """
    boolsel = scipy.ndimage.morphology.binary_dilation(labels == label)
    neighbor_labels = set(numpy.unique(labels[boolsel]))
    neighbor_labels -= set([label, ])
    return neighbor_labels


def relabel(labels, background_label=None):
    """
    labels: 2D array of labels as generated by generate_input
    """
    labellist = set(numpy.unique(labels))
    nlabels = len(labellist)
    if background_label is not None:
        labellist -= set([background_label, ])
    out = labels.copy() * nlabels
    colors = set(range(nlabels))
    for label in labellist:
        label *= nlabels
        neighbor_labels = get_neighbor_regions(out, label)
        colors_ = colors - set(neighbor_labels)
        out[out == label] = list(colors_)[0]
    return out


if __name__ == '__main__':
    labels = generate_input()
    out = relabel(labels)
    f, (ax1, ax2) = plt.subplots(1, 2, sharey=True, sharex=True)
    pcm = ax1.matshow(labels)
    f.colorbar(pcm, ax=ax1, shrink=0.5)
    pcm = ax2.matshow(out, cmap=plt.get_cmap('jet'))
    f.colorbar(pcm, ax=ax2, shrink=0.5)
    plt.savefig('4colors.png')
    plt.show()
